version: 2.1

workflows:
  build_and_test:
    jobs:
      - build
      - blendnet_test:
          blender_version: "2.80" # The first one supported
      - blendnet_test:
          blender_version: lts
      - blendnet_test:
          blender_version: latest # Latest release available

  nightly_test:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - blendnet_test:
          blender_version: "2.80" # The first one supported
      - blendnet_test:
          blender_version: lts
      - blendnet_test:
          blender_version: latest # Latest release available

jobs:
  build:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - checkout:
          path: blendnet

      - run:
          name: Packing dist archive
          command: blendnet/.circleci/build.sh

      # TODO: run static tests
      #- store_test_results:
      #    path: results/reports

      - store_artifacts:
          path: results
          destination: results

  blendnet_test:
    parameters:
      blender_version:
        description: |
          Blender version to use
          * <version> - exact version you need
          * lts    - latest available LTS version
          * latest - latest available version
        type: string
    docker:
      - image: cimg/base:stable-20.04

    steps:
      - checkout:
          path: blendnet

      - setup_remote_docker

      - run:
          name: Preparing to the test execution
          command: |
            blendnet/.circleci/test_prepare.sh "<< parameters.blender_version >>"
            # Creating the docker container to store the data
            docker create -v /srv --name blendnet-srv alpine /bin/true
            mkdir -p scripts/addons
            cp -a blendnet scripts/addons
            docker cp scripts blendnet-srv:/srv
            docker cp blender blendnet-srv:/srv
            docker cp workspace blendnet-srv:/srv
            mkdir -p results
          no_output_timeout: 5m

      - run:
          name: Run blendnet-agent-1
          background: true
          command: |
            # Run Agent for max 10 minutes
            docker run --name blendnet-agent-1 -m 2G --rm -it \
                --volumes-from blendnet-srv ubuntu:20.04 \
                /srv/workspace/test_run_service.sh agent 2>&1 | tee results/agent-1.log || true

            echo "Check exceptions in the log"
            grep '^Traceback' results/agent-1.log && exit 1 || echo ok
            echo "Check errors in the log"
            grep '^ERROR: ' results/agent-1.log && exit 2 || echo ok
            grep '^Fatal Python error: ' results/agent-1.log && exit 3 || echo ok

      - run:
          name: Run blendnet-agent-2
          background: true
          command: |
            # Run Agent for max 10 minutes
            docker run --name blendnet-agent-2 -m 2G --rm -it \
                --volumes-from blendnet-srv ubuntu:20.04 \
                /srv/workspace/test_run_service.sh agent 2>&1 | tee results/agent-2.log || true

            echo "Check exceptions in the log"
            grep '^Traceback' results/agent-2.log && exit 1 || echo ok
            echo "Check errors in the log"
            grep '^ERROR: ' results/agent-2.log && exit 2 || echo ok
            grep '^Fatal Python error: ' results/agent-2.log && exit 3 || echo ok

      - run:
          name: Run blendnet-manager
          background: true
          command: |
            # Wait for blendnet-agent-1 container
            while ! docker ps | grep blendnet-agent-1; do echo "waiting agent-1"; docker ps; sleep 1; done
            # Wait for blendnet-agent-2 container
            while ! docker ps | grep blendnet-agent-2; do echo "waiting agent-2"; docker ps; sleep 1; done

            # Run Manager for max 10 minutes
            docker run --name blendnet-manager -m 2G --rm -it \
                --link blendnet-agent-1:blendnet-agent-1-host \
                --link blendnet-agent-2:blendnet-agent-2-host \
                --volumes-from blendnet-srv ubuntu:20.04 \
                /srv/workspace/test_run_service.sh manager 2>&1 | tee results/manager.log || true

            echo "Check exceptions in the log"
            grep '^Traceback' results/manager.log && exit 1 || echo ok
            echo "Check errors in the log"
            grep '^ERROR: ' results/manager.log && exit 2 || echo ok
            grep '^Fatal Python error: ' results/manager.log && exit 3 || echo ok

      - run:
          name: Run blendnet-executor
          background: true
          command: |
            # Wait for blendnet-manager container
            while ! docker ps | grep blendnet-manager; do echo "waiting manager"; docker ps; sleep 1; done
            # Run executor to connect with Manager
            docker run --name blendnet-executor -m 1G --rm -it \
                --link blendnet-manager:blendnet-manager-host \
                --volumes-from blendnet-srv ubuntu:20.04 /bin/sleep 3600 || true

      - run:
          name: Run Addon test
          command: blendnet/.circleci/test_execute_addon.sh "<< parameters.blender_version >>" || exit 1

      - run:
          name: Run API test
          command: blendnet/.circleci/test_execute_api.sh "<< parameters.blender_version >>" || exit 1

      - run:
          name: Clean the docker containers
          when: always
          command: |
            # TODO: when BN-64 is completed - stop Manager and Agents properly
            docker rm -f blendnet-agent-1 || true
            docker rm -f blendnet-agent-2 || true
            docker rm -f blendnet-manager || true
            docker rm -f blendnet-executor || true
            docker rm -f blendnet-srv || true

      # TODO: Add test results
      #- store_test_results:
      #    path: results/reports

      - store_artifacts:
          path: results
          destination: results
